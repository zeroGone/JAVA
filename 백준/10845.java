/* 10845번 큐
 * 정수를 저장하는 큐를 구현한 다음, 입력으로 주어지는 명령을 처리하는 프로그램을 작성하시오.
 * 명령은 총 여섯 가지이다.
 * push X: 정수 X를 큐에 넣는 연산이다.
 * pop: 큐에서 가장 앞에 있는 정수를 빼고, 그 수를 출력한다. 만약 큐에 들어있는 정수가 없는 경우에는 -1을 출력한다.
 * size: 큐에 들어있는 정수의 개수를 출력한다.
 * empty: 큐가 비어있으면 1, 아니면 0을 출력한다.
 * front: 큐의 가장 앞에 있는 정수를 출력한다. 만약 큐에 들어있는 정수가 없는 경우에는 -1을 출력한다.
 * back: 큐의 가장 뒤에 있는 정수를 출력한다. 만약 큐에 들어있는 정수가 없는 경우에는 -1을 출력한다.
 * 입력:
 * 첫째 줄에 주어지는 명령의 수 N (1 ≤ N ≤ 10,000)이 주어진다. 
 * 둘째 줄부터 N개의 줄에는 명령이 하나씩 주어진다. 
 * 주어지는 정수는 1보다 크거나 같고, 100,000보다 작거나 같다. 
 * 문제에 나와있지 않은 명령이 주어지는 경우는 없다.
 * 출력:
 * 출력해야하는 명령이 주어질 때마다, 한 줄에 하나씩 출력한다.
 * */
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {
	private static String[] 명령어들 = new String[] {
			"push","pop","size","empty","front","back"
	};
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);
		
		int N = input.nextInt();
		input.nextLine();
		
		String[] cases = new String[N];
		
		Queue queue = new LinkedList();
		
		for(int i=0; i<cases.length; i++) cases[i]=input.nextLine();
		
		for(String i:cases) {
			String check = i.substring(0,2);
			if(check.equals(명령어들[0].substring(0, 2))) {
				int value = Integer.parseInt(i.substring(5));
				queue.add(value);
			}else if(check.equals(명령어들[1].substring(0, 2))) {
				if(queue.isEmpty()) System.out.println(-1);
				else System.out.println(queue.poll());
			}else if(check.equals(명령어들[2].substring(0, 2))) {
				System.out.println(queue.size());
			}else if(check.equals(명령어들[3].substring(0, 2))) {
				if(queue.isEmpty()) System.out.println(1);
				else System.out.println(0);
			}else if(check.equals(명령어들[4].substring(0, 2))) {
				if(queue.isEmpty()) System.out.println(-1);
				else System.out.println(queue.peek());
			}else if(check.equals(명령어들[5].substring(0, 2))) {
				if(queue.isEmpty()) System.out.println(-1);
				else {
					Object[] temp = queue.toArray();
					System.out.println(temp[queue.size()-1]);
				}
			}
		}
	}
}